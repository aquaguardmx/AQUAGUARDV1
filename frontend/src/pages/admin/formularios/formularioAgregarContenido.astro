---
// 1. Importa tu layout principal
import AdminLayout from "../../../layouts/AdminLayout.astro";

// 2. Define la estructura de tu Curso
type Contenido = {
    id_leccion: number;
    titulo_leccion: string;
    contenido_leccion: string;
    video: string;
    orden: number;
    id_curso: number;
};

type Curso = {
    id_curso: number | string;
    nombre_curso: string;
    descripcion: string;
    nivel_dificultad: string;
    contenidos?: Contenido[]; // Propiedad opcional para los contenidos
};

// 3. Hacemos el fetch al API de Laravel
let cursos: Curso[] = [];
let error: string | null = null;

try {
    // --- 1. OBTENEMOS LOS CURSOS ---
    const responseCursos = await fetch("http://localhost:8000/api/cursos/");

    if (!responseCursos.ok) {
        throw new Error(`Error al obtener los cursos: ${responseCursos.statusText}`);
    }

    const responseDataCursos = await responseCursos.json();

    // Asignamos los cursos (manejando si viene con 'data' o no)
    let cursosBase: Curso[] = [];
    if (Array.isArray(responseDataCursos)) {
        cursosBase = responseDataCursos;
    } else if (responseDataCursos && Array.isArray(responseDataCursos.data)) {
        cursosBase = responseDataCursos.data;
    } else {
        console.warn(
            "La respuesta de la API de cursos no fue un array:",
            responseDataCursos,
        );
    }

    // --- 2. OBTENEMOS LOS CONTENIDOS PARA CADA CURSO ---
    
    // Creamos un array de promesas. Cada una buscará el contenido de UN curso
    const promesasDeContenido = cursosBase.map(async (curso) => {
        
        // !!! AJUSTA ESTA URL a tu API de contenidos !!!
        const responseContenido = await fetch(
            `http://localhost:8000/api/lecciones` 
            // O quizás es: `http://localhost:8000/api/contenidos?curso=${curso.id_curso}`
            // ¡Verifica tu ruta!
        );

        if (!responseContenido.ok) {
            console.warn(`No se pudo cargar contenido para el curso ID: ${curso.id_curso}`);
            return { ...curso, contenidos: [] }; // Devuelve el curso con contenidos vacíos si falla
        }

        const responseDataContenido = await responseContenido.json();

        // Extraemos los contenidos (manejando si vienen con 'data' o no)
        let contenidosDelCurso: Contenido[] = [];
        if (Array.isArray(responseDataContenido)) {
            contenidosDelCurso = responseDataContenido;
        } else if (responseDataContenido && Array.isArray(responseDataContenido.data)) {
            contenidosDelCurso = responseDataContenido.data;
        }

        // Devolvemos el objeto del curso COMPLETO, con sus contenidos asignados
        return {
            ...curso,
            contenidos: contenidosDelCurso,
        };
    });

    // --- 3. ESPERAMOS A QUE TODAS LAS PETICIONES TERMINEN ---
    
    // Promise.all ejecuta todas las promesas del array en paralelo
    // 'cursos' ahora será el array de cursos, cada uno con su propiedad 'contenidos'
    cursos = await Promise.all(promesasDeContenido);

    // --- 4. MOSTRAMOS EN CONSOLA (EN TU TERMINAL) ---
    console.log(
        "Datos COMPLETOS (Cursos + Contenidos):",
        JSON.stringify(cursos, null, 2),
    );

} catch (e) {
    console.error(e);
    error =
        "No se pudo conectar con la API. Asegúrate de que tu backend esté corriendo.";
}
---

<AdminLayout title="Gestión de Cursos">
    <div class="p-6">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
            Gestión de Cursos
        </h1>
        <p class="mt-1 text-sm font-normal text-gray-500 dark:text-gray-400">
            Administra, busca y crea nuevos cursos en el sistema.
        </p>

        {
            error && (
                <div
                    class="p-4 my-4 text-sm text-red-800 rounded-lg bg-red-50 dark:text-red-400"
                    role="alert"
                >
                    <span class="font-medium">¡Error de conexión!</span> {error}
                </div>
            )
        }

        <div
            class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 py-4"
        >
            <div class="w-full md:w-1/2">
                <form class="flex items-center">
                    <label for="simple-search" class="sr-only">Buscar</label>
                    <div class="relative w-full">
                        <div
                            class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none"
                        >
                            <svg
                                class="w-4 h-4 text-gray-500 dark:text-gray-400"
                                aria-hidden="true"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 20 20"
                                ><path
                                    stroke="currentColor"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
                                ></path></svg
                            >
                        </div>
                        <input
                            type="text"
                            id="simple-search"
                            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                            placeholder="Buscar curso por nombre..."
                        />
                    </div>
                </form>
            </div>
            <div
                class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end"
            >
                <a
                    href="/admin/formularios/formularioAgregarCurso"
                    class="flex items-center justify-center text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
                >
                    <svg
                        class="h-3.5 w-3.5 mr-2"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                        aria-hidden="true"
                        ><path
                            clip-rule="evenodd"
                            fill-rule="evenodd"
                            d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                        ></path></svg
                    >
                    Añadir Curso
                </a>
            </div>
        </div>

        <!-- Tabla de Cursos Mejorada -->
        <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
            <table
                class="w-full text-sm text-left text-gray-500 dark:text-gray-400"
            >
                <thead
                    class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
                >
                    <tr>
                        <th scope="col" class="px-6 py-3 text-center">Nombre del Curso</th>
                        <th scope="col" class="px-6 py-3 text-center">Nivel</th>
                        <th scope="col" class="px-6 py-3 text-center">ID</th>
                        <th scope="col" class="px-6 py-3 text-center"
                            >Acciones</th
                        >
                    </tr>
                </thead>
                <tbody>
                    {
                        cursos.length > 0 ? (
                            cursos.map((curso) => (
                                <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                                    <th
                                        scope="row"
                                        class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white text-center"
                                    >
                                        {curso.nombre_curso}
                                    </th>
                                    <td class="px-6 py-4 text-center">
                                        {curso.nivel_dificultad ===
                                        "principiante" ? (
                                            <span class="bg-green-100 text-green-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">
                                                Principiante
                                            </span>
                                        ) : curso.nivel_dificultad ===
                                          "intermedio" ? (
                                            <span class="bg-yellow-100 text-yellow-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded-full dark:bg-yellow-900 dark:text-yellow-300">
                                                Intermedio
                                            </span>
                                        ) : (
                                            <span class="bg-red-100 text-red-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded-full dark:bg-red-900 dark:text-red-300">
                                                Avanzado
                                            </span>
                                        )}
                                    </td>
                                    <td class="px-6 py-4 text-center">{curso.id_curso}</td>
                                    <td class="px-6 py-4 text-center">
                                            <a
                                                href={`/admin/cursos/${curso.id_curso}/contenidos`}
                                                class="font-medium text-blue-600 dark:text-blue-500 hover:underline text-center"
                                            >
                                                Contenido
                                            </a>
                                        
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <td
                                    colspan="4"
                                    class="px-6 py-4 text-center text-gray-500 dark:text-gray-400"
                                >
                                    {error
                                        ? "Error al cargar los datos."
                                        : "No se encontraron cursos."}
                                </td>
                            </tr>
                        )
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Script para manejar eliminación -->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const deleteButtons = document.querySelectorAll(".btn-delete");
            deleteButtons.forEach((button) => {
                button.addEventListener("click", async (e) => {
                    const target = e.target as HTMLButtonElement;
                    const id = target.dataset.cursoId;
                    
                    // Opcional: Pedir confirmación
                    // if (!confirm(`¿Estás seguro de que quieres eliminar el curso con ID ${id}?`)) {
                    //    return;
                    // }

                    try {
                        const response = await fetch(
                            `http://localhost:8000/api/cursos/${id}`,
                            {
                                method: "DELETE",
                            },
                        );

                        if (response.ok) {
                            // Eliminar la fila de la tabla
                            target.closest("tr")?.remove();
                        } else {
                            const errorData = await response.json();
                            console.error("Error al eliminar:", errorData.message);
                            // Aquí podrías mostrar un modal de error
                        }
                    } catch (error) {
                        console.error("Error de red:", error);
                    }
                });
            });
        });
    </script>
</AdminLayout>
